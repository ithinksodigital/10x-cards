-- Migration: Create Generations Table
-- Purpose: Track AI generation sessions for flashcards with analytics and cost tracking
-- Affected: New table 'generations'
-- Special Considerations:
--   - Must be created BEFORE cards table due to foreign key dependency
--   - RLS enabled for multi-tenant security
--   - Tracks detailed metrics for AI model performance analysis

-- create generations table to track ai flashcard generation sessions
create table generations (
  -- unique identifier for the generation session
  id uuid primary key default gen_random_uuid(),
  
  -- user who initiated the generation
  -- cascading delete ensures generations are removed when user profile is deleted
  user_id uuid not null references profiles(id) on delete cascade,
  
  -- optional: target set where generated cards were placed
  -- set null on delete allows keeping generation history even if set is deleted
  set_id uuid references sets(id) on delete set null,
  
  -- ai model used for generation (e.g., 'gpt-4', 'gpt-4o', 'claude-3.5-sonnet')
  model text not null,
  
  -- original text provided by user for flashcard generation
  source_text text not null,
  
  -- sha-256 hash of source text for deduplication and caching
  source_text_hash text not null,
  
  -- length of source text in characters
  source_text_length integer not null,
  
  -- total number of cards generated by ai in this session
  generated_count integer not null default 0,
  
  -- total cards accepted by user (edited + unedited)
  accepted_count integer not null default 0,
  
  -- cards accepted without any modifications
  accepted_unedited_count integer not null default 0,
  
  -- cards accepted after user edited them
  accepted_edited_count integer not null default 0,
  
  -- cards rejected/discarded by user
  rejected_count integer not null default 0,
  
  -- time taken to generate cards (milliseconds)
  generation_duration_ms integer,
  
  -- number of tokens in the prompt sent to ai
  prompt_tokens integer,
  
  -- number of tokens in ai's completion/response
  completion_tokens integer,
  
  -- estimated cost in usd (calculated from token usage and model pricing)
  total_cost_usd numeric(10,6),
  
  -- timestamp when generation was initiated
  created_at timestamptz not null default now(),
  
  -- timestamp when generation record was last updated
  -- maintained automatically via trigger
  updated_at timestamptz not null default now()
);

-- create index on (user_id, created_at) for user's generation history queries
-- supports: "show me all my generations, newest first"
create index generations_user_id_created_at_idx on generations(user_id, created_at desc);

-- create index on source_text_hash for deduplication checks
-- supports: "have we generated cards from this exact text before?"
create index generations_source_text_hash_idx on generations(source_text_hash);

-- create index on (model, created_at) for model performance analysis
-- supports: "how has gpt-4 performed over time?"
create index generations_model_created_at_idx on generations(model, created_at desc);

-- create index on set_id for finding generations that populated a specific set
-- supports: "what generations contributed to this set?"
create index generations_set_id_idx on generations(set_id);

-- enable row level security to ensure users can only access their own generations
alter table generations enable row level security;

-- rls policy: allow authenticated users to select their own generations
create policy generations_select_own on generations
  for select
  to authenticated
  using (user_id = auth.uid());

-- rls policy: allow anonymous users to select generations (read-only public access)
create policy generations_select_anon on generations
  for select
  to anon
  using (true);

-- rls policy: allow authenticated users to insert their own generations
create policy generations_insert_own on generations
  for insert
  to authenticated
  with check (user_id = auth.uid());

-- rls policy: allow authenticated users to update their own generations
create policy generations_update_own on generations
  for update
  to authenticated
  using (user_id = auth.uid())
  with check (user_id = auth.uid());

-- rls policy: allow authenticated users to delete their own generations
create policy generations_delete_own on generations
  for delete
  to authenticated
  using (user_id = auth.uid());

